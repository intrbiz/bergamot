/* Generated By:JavaCC: Do not edit this line. VirtualCheckExpressionParserInternalConstants.java */
package com.intrbiz.bergamot.virtual.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface VirtualCheckExpressionParserInternalConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LUUID = 6;
  /** RegularExpression Id. */
  int XOR = 7;
  /** RegularExpression Id. */
  int OR = 8;
  /** RegularExpression Id. */
  int AND = 9;
  /** RegularExpression Id. */
  int NOT = 10;
  /** RegularExpression Id. */
  int EQ = 11;
  /** RegularExpression Id. */
  int NE = 12;
  /** RegularExpression Id. */
  int LT = 13;
  /** RegularExpression Id. */
  int LTEQ = 14;
  /** RegularExpression Id. */
  int GT = 15;
  /** RegularExpression Id. */
  int GTEQ = 16;
  /** RegularExpression Id. */
  int STCOMP = 17;
  /** RegularExpression Id. */
  int EDCOMP = 18;
  /** RegularExpression Id. */
  int STARRAY = 19;
  /** RegularExpression Id. */
  int EDARRAY = 20;
  /** RegularExpression Id. */
  int STBRACE = 21;
  /** RegularExpression Id. */
  int EDBRACE = 22;
  /** RegularExpression Id. */
  int SEP = 23;
  /** RegularExpression Id. */
  int HOST = 24;
  /** RegularExpression Id. */
  int SERVICE = 25;
  /** RegularExpression Id. */
  int TRAP = 26;
  /** RegularExpression Id. */
  int RESOURCE = 27;
  /** RegularExpression Id. */
  int CLUSTER = 28;
  /** RegularExpression Id. */
  int LON = 29;
  /** RegularExpression Id. */
  int COUNT = 30;
  /** RegularExpression Id. */
  int IS = 31;
  /** RegularExpression Id. */
  int ALL = 32;
  /** RegularExpression Id. */
  int ANY = 33;
  /** RegularExpression Id. */
  int ONE = 34;
  /** RegularExpression Id. */
  int OF = 35;
  /** RegularExpression Id. */
  int CASE = 36;
  /** RegularExpression Id. */
  int WHEN = 37;
  /** RegularExpression Id. */
  int THEN = 38;
  /** RegularExpression Id. */
  int ELSE = 39;
  /** RegularExpression Id. */
  int END = 40;
  /** RegularExpression Id. */
  int AS = 41;
  /** RegularExpression Id. */
  int LSTATUS = 42;
  /** RegularExpression Id. */
  int LBOOLEAN = 43;
  /** RegularExpression Id. */
  int LINTEGER = 44;
  /** RegularExpression Id. */
  int HEXCHAR = 45;
  /** RegularExpression Id. */
  int ESCAPECHAR = 46;
  /** RegularExpression Id. */
  int UESCAPECHAR = 47;
  /** RegularExpression Id. */
  int LSTRING = 48;
  /** RegularExpression Id. */
  int QUOTE = 49;
  /** RegularExpression Id. */
  int ENDQUOTE = 51;
  /** RegularExpression Id. */
  int CHAR = 52;
  /** RegularExpression Id. */
  int CNTRLESC = 53;
  /** RegularExpression Id. */
  int HEX = 55;
  /** RegularExpression Id. */
  int HEXESC = 56;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int STRINGSTATE = 1;
  /** Lexical state. */
  int ESCSTATE = 2;
  /** Lexical state. */
  int HEXSTATE = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "<LUUID>",
    "<XOR>",
    "<OR>",
    "<AND>",
    "<NOT>",
    "<EQ>",
    "<NE>",
    "<LT>",
    "<LTEQ>",
    "<GT>",
    "<GTEQ>",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\"host\"",
    "\"service\"",
    "\"trap\"",
    "\"resource\"",
    "\"cluster\"",
    "\"on\"",
    "\"count\"",
    "\"is\"",
    "\"all\"",
    "\"any\"",
    "\"one\"",
    "\"of\"",
    "\"case\"",
    "\"when\"",
    "\"then\"",
    "\"else\"",
    "\"end\"",
    "\"as\"",
    "<LSTATUS>",
    "<LBOOLEAN>",
    "<LINTEGER>",
    "<HEXCHAR>",
    "<ESCAPECHAR>",
    "<UESCAPECHAR>",
    "<LSTRING>",
    "\"\\\"\"",
    "\"\\\\\"",
    "<ENDQUOTE>",
    "<CHAR>",
    "<CNTRLESC>",
    "\"u\"",
    "<HEX>",
    "<HEXESC>",
  };

}
