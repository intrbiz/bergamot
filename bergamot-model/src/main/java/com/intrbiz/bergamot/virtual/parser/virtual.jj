options {
  STATIC = false;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(VirtualCheckExpressionParserInternal)

package com.intrbiz.bergamot.virtual.parser;

import com.intrbiz.bergamot.model.*;
import com.intrbiz.bergamot.virtual.operator.*;
import com.intrbiz.bergamot.virtual.reference.*;
import com.intrbiz.bergamot.virtual.*;
import java.util.*;

@SuppressWarnings("all")
public final class VirtualCheckExpressionParserInternal {

}

PARSER_END(VirtualCheckExpressionParserInternal)

SKIP : { " " | "\t" | "\n" | "\r" | "\r\n" }
TOKEN : 
{
    <LUUID               :  (<HEXCHAR>){8} "-" (<HEXCHAR>){4} "-" (<HEXCHAR>){4} "-" (<HEXCHAR>){4} "-" (<HEXCHAR>){12} >
  | <XOR                 : "^" | "xor" >
  | <OR                  : "||" | "|" | "or" >
  | <AND                 : "&&" | "&" | "and" >
  | <NOT                 : "!" | "not" >
  | <EQ                  : "==" | "eq" >
  | <NE                  : "!=" | "ne" >
  | <LT                  : "<"  | "lt" >
  | <LTEQ                : "<=" | "lteq" >
  | <GT                  : ">"  | "gt" >
  | <GTEQ                : ">=" | "gteq" >
  | <STCOMP              : "(" >
  | <EDCOMP              : ")" >
  | <STARRAY             : "[" >
  | <EDARRAY             : "]" >
  | <STBRACE             : "{" >
  | <EDBRACE             : "}" >
  | <SEP                 : "," >
  | <HOST                : "host" >
  | <SERVICE             : "service" >
  | <TRAP                : "trap" >
  | <RESOURCE            : "resource" >
  | <CLUSTER             : "cluster" >
  | <LON                 : "on" >
  | <COUNT               : "count" >
  | <IS                  : "is" >
  | <ALL                 : "all" >
  | <ANY                 : "any" >
  | <ONE                 : "one" >
  | <OF                  : "of" >
  | <CASE                : "case" >
  | <WHEN                : "when" >
  | <THEN                : "then" >  
  | <ELSE                : "else" >
  | <END                 : "end" >
  | <AS                  : "as" >
  | <LSTATUS             : "PENDING" | "OK" | "WARNING" | "CRITICAL" | "UNKNOWN" | "TIMEOUT" | "DISCONNECTED" | "ACTION" >
  | <LBOOLEAN            : "true" | "TRUE" | "false" | "FALSE" >
  | <LINTEGER            : (["0"-"9"])+ >
  | <#HEXCHAR            : ["a"-"f","A"-"F","0"-"9"]> 
  | <#ESCAPECHAR         : "\\" ["n","t","b","r","f","\\","'","\"", "/"] > 
  | <#UESCAPECHAR        : "\\u" <HEXCHAR><HEXCHAR><HEXCHAR><HEXCHAR> > 
  | <LSTRING             : "\'" ( (~["\'","\\","\n","\r"]) | <ESCAPECHAR> | <UESCAPECHAR>)* "\'" >
  | <QUOTE               : "\"" > : STRINGSTATE 
}

<STRINGSTATE> MORE  : { "\\" : ESCSTATE }
<STRINGSTATE> TOKEN : { <ENDQUOTE : <QUOTE> > : DEFAULT | <CHAR : ~["\"","\\"]> }
<ESCSTATE> TOKEN : { <CNTRLESC : ["\'","\\","/","b","f","n","r","t"]> : STRINGSTATE }
<ESCSTATE> MORE  : { "u" : HEXSTATE }
<HEXSTATE> TOKEN : { <#HEX : ["a"-"f","A"-"F","0"-"9"]> | <HEXESC : <HEX><HEX><HEX><HEX> > : STRINGSTATE }

private Status readStatus() : 
{
    Token t;
}
{
    t = <LSTATUS>
    { return Status.parse(t.image); }
}

private UUID readUUID() : 
{
    Token t;
}
{
    t = <LUUID>
    { return UUID.fromString(t.image); }
}

private String readString() : 
{
    Token t;
}
{
    t = <LSTRING>
    { return t.image.substring(1, t.image.length() -1); }
}

private ValueOperator readHost() :
{
    String name = null;
    UUID id = null;
    HostReference host = null;
}
{
    ( 
		<HOST>
		(
	    	(
				id = readUUID()
				{ host = new HostById(id); }
	    	) |
	    	(
				name = readString()
				{ host = new HostByName(name); }
	    	)
		)
    )
    { return new ValueOperator(host); }
}

private ValueOperator readService() :
{
    String name = null;
    String hostName = null;
    UUID id = null;
    ServiceReference service = null;
    HostReference host = null;
}
{
    ( 
		<SERVICE>
		(
	    	(
				id = readUUID()
				{ service = new ServiceById(id); }
	    	) |
	    	(
				name = readString()
	    		<LON>
	    		(<HOST>)?
	    		(
			    	(
						id = readUUID()
						{ host = new HostById(id); }
			    	) |
			    	(
						hostName = readString()
						{ host = new HostByName(hostName); }
			    	)
				)
	      		{ service = new ServiceByName(host, name); }
	    	)
		)
    )
    { return new ValueOperator(service); }
}

private ValueOperator readParentService() :
{
    String name = null;
    String hostName = null;
    UUID id = null;
    ServiceReference service = null;
    HostReference host = null;
}
{
    ( 
		<SERVICE>
		(
	    	(
				id = readUUID()
				{ service = new ServiceById(id); }
	    	) |
	    	LOOKAHEAD(2) (
	    		name = readString()
	    		<LON>
	    		(<HOST>)?
	    		(
			    	(
						id = readUUID()
						{ host = new HostById(id); }
			    	) |
			    	(
						hostName = readString()
						{ host = new HostByName(hostName); }
			    	)
				)
	      		{ service = new ServiceByName(host, name); }
	    	) |
	    	(
				name = readString()
	    		{ service = new AnonymousService(name); }
	    	)
		)
    )
    { return new ValueOperator(service); }
}

private ValueOperator readTrap() :
{
    String name = null;
    String hostName = null;
    UUID id;
    TrapReference trap = null;
    HostReference host = null;
}
{
    ( 
		<TRAP>
		(
	    	(
				id = readUUID()
				{ trap = new TrapById(id); }
	    	) |
	    	(
				name = readString()
	    		<LON>
	    		(<HOST>)?
				(
			    	(
						id = readUUID()
						{ host = new HostById(id); }
			    	) |
			    	(
						hostName = readString()
						{ host = new HostByName(hostName); }
			    	)
				)
	      		{ trap = new TrapByName(host, name); }
	    	)
		)
    )
    { return new ValueOperator(trap); }
}

private ValueOperator readParentTrap() :
{
    String name = null;
    String hostName = null;
    UUID id;
    TrapReference trap = null;
    HostReference host = null;
}
{
    ( 
		<TRAP>
		(
	    	(
				id = readUUID()
				{ trap = new TrapById(id); }
	    	) |
	    	LOOKAHEAD(2) (
				name = readString()
	    		<LON>
	    		(<HOST>)?
				(
			    	(
						id = readUUID()
						{ host = new HostById(id); }
			    	) |
			    	(
						hostName = readString()
						{ host = new HostByName(hostName); }
			    	)
				)
	      		{ trap = new TrapByName(host, name); }
	    	) |
	    	(
	    		name = readString()
	    		{ trap = new AnonymousTrap(name); }
	    	)
		)
    )
    { return new ValueOperator(trap); }
}

private ValueOperator readCluster() :
{
    String name = null;
    UUID id = null;
    ClusterReference cluster = null;
}
{
    ( 
		<CLUSTER>
		(
	    	(
				id = readUUID()
				{ cluster = new ClusterById(id); }
	    	) |
	    	(
				name = readString()
				{ cluster = new ClusterByName(name); }
	    	)
		)
    )
    { return new ValueOperator(cluster); }
}

private ValueOperator readResource() :
{
    String name = null;
    String clusterName = null;
    UUID id = null;
    ClusterReference cluster = null;
    ResourceReference resource = null;
}
{
    ( 
		<RESOURCE>
		(
	    	(
				id = readUUID()
				{ resource = new ResourceById(id); }
	    	) |
	    	(
				name = readString()
				(
		    		<LON>
		    		(<CLUSTER>)?
		    		(
				    	(
							id = readUUID()
							{ cluster = new ClusterById(id); }
				    	) |
				    	(
							name = readString()
							{ cluster = new ClusterByName(name); }
				    	)
					)
		      		{ resource = new ResourceByName(cluster, name); }
				)?
	    	)
		)
    )
    { return new ValueOperator(null); }
}

private ValueOperator readCheck() :
{
    ValueOperator check;
}
{
    ( 
    	check = readHost()          |
    	check = readService()       |
    	check = readTrap()          |
    	check = readCluster()       |
    	check = readResource()
    )
    { return check; }
}

private List<ValueOperator> readCheckList() :
{
    List<ValueOperator> checks = new LinkedList<ValueOperator>();
    ValueOperator check;
}
{
    (
    	<STARRAY>
    	(
    		check = readCheck()
    		{ checks.add(check); }
    		(
    			<SEP>
    			check = readCheck()
    			{ checks.add(check); }
    		)*
    	)?
    	<EDARRAY>
    )
    { return checks; }
}

public List<CheckReference> readParents() :
{
    List<CheckReference> checks = new LinkedList<CheckReference>();
    ValueOperator check;
}
{
    (
		( 
	        check = readHost()             |
	        check = readCluster()          |
	        check = readResource()         |
	        check = readParentService()    |
    		check = readParentTrap()
		)
		{ checks.add(check.getCheck()); }
		(
			<SEP>
			( 
		        check = readHost()             |
		        check = readCluster()          |
		        check = readResource()         |
		        check = readParentService()    |
	    		check = readParentTrap()
			)
			{ checks.add(check.getCheck()); }
		)*
    )
    { return checks; }
}

private VirtualCheckOperator readValue() :
{
    VirtualCheckOperator value;
}
{
    (
		(
	    	<STCOMP> 
	    	value = readExpression() 
	    	<EDCOMP> 
	    	{ value = new BracketOperator(value); }
		) |
		LOOKAHEAD(readCheck())   value = readCheck()
    )
    { return value; }
}

private VirtualCheckOperator readUnary() :
{
    VirtualCheckOperator value;
}
{
    (
        <NOT>
        value = readValue()
    )
    { return new NotOperator(value); }
}

private VirtualCheckOperator readAllFunction() :
{
    List<ValueOperator> checks;
}
{
    (
        <ALL>
        (<OF>)?
        checks = readCheckList()
    )
    { return new AllFunction(checks); }
}

private VirtualCheckOperator readAnyFunction() :
{
    List<ValueOperator> checks;
}
{
    (
        <ANY>
        (<OF>)?
        checks = readCheckList()
    )
    { return new AnyFunction(checks); }
}

private VirtualCheckOperator readOneOfFunction() :
{
    List<ValueOperator> checks;
    Status as = null;
}
{
    (
        <ONE>
        (<OF>)?
        checks = readCheckList()
        (
        	<AS>
        	as = readStatus()
        )?
    )
    { return new OneOfFunction(checks, as); }
}

private VirtualCheckOperator readCountFunction() :
{
    Status status = null;
    List<ValueOperator> checks;
    Token test = null;
    Token value = null;
    Status as = null;
}
{
    (
        <COUNT>
        (
        	status = readStatus()
        )?
        (<OF>)?
        checks = readCheckList()
        (<IS>)?
        (
        	test = <EQ> | <NE> | <LT> | <LTEQ> | <GT> | <GTEQ>
        )
        value = <LINTEGER>
        (
        	<AS>
        	as = readStatus()
        )?
    )
    { return new CountFunction(status, checks, test.image.toLowerCase(), Integer.parseInt(value.image), as); }
}

private VirtualCheckOperator readCaseFunction() :
{
	VirtualCheckOperator check;
	Status status;
	Status as;
	List<CaseOperator.CaseWhen> when = new LinkedList<CaseOperator.CaseWhen>();
	Status elseStatus = null;
}
{
    (
        <CASE>
        (
			<WHEN>
			check = readExpression()
			<IS>
			status = readStatus()
			<THEN>
			as = readStatus()
			{ when.add(new CaseOperator.CaseWhen(check, status, as)); }
        )
        (
        	<WHEN>
			check = readExpression()
			<IS>
			status = readStatus()
			<THEN>
			as = readStatus()
			{ when.add(new CaseOperator.CaseWhen(check, status, as)); }
        )*
        (
        	<ELSE>
        	elseStatus = readStatus()
        )?
        <END>
    )
    { return new CaseOperator(when, elseStatus); }
}

private VirtualCheckOperator readFunction() :
{
    VirtualCheckOperator operator;
}
{
    (
        operator = readAllFunction()   |
        operator = readAnyFunction()   |
        operator = readOneOfFunction() |
        operator = readCountFunction() |
        operator = readCaseFunction()
    )
    { return operator; }
}

private VirtualCheckOperator readOperator() :
{
    VirtualCheckOperator operator;
}
{
    (
        operator = readValue()    |
        operator = readUnary()    |
        operator = readFunction()
    )
    { return operator; }
}

public VirtualCheckOperator readExpression() :
{
    VirtualCheckOperator operator;
}
{
    (
		operator = readXorExpression()
    )
    { return operator; }
}

private VirtualCheckOperator readXorExpression() :
{
    VirtualCheckOperator l;
    VirtualCheckOperator r;
}
{
    (
		l = readOrExpression()
		(
	    	<XOR>
	    	r = readOrExpression()
	    	{ l = new XorOperator(l, r); }
		)*
    )
    { return l; }
}

private VirtualCheckOperator readOrExpression() :
{
    VirtualCheckOperator l;
    VirtualCheckOperator r;
}
{
    (
		l = readAndExpression()
		(
	    	<OR>
	    	r = readAndExpression()
	    	{ l = new OrOperator(l, r); }
		)*
    )
    { return l; }
}

private VirtualCheckOperator readAndExpression() :
{
    VirtualCheckOperator l;
    VirtualCheckOperator r;
}
{
    (
		l = readOperator()
		(
	    	<AND>
	    	r = readOperator()
	    	{l = new AndOperator(l,r); }
		)*
    )
    { return l; }
}
